version: '3.8'

services:
  # Main MCP Server Application
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: mcp-server-prod
    ports:
      - "8000:8000"
      - "8001:8001"  # Prometheus metrics
    environment:
      - MCP_ENVIRONMENT=production
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/var/log/mcp-server
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./repositories:/app/repositories
      - mcp_database:/app/database  # Persistent database storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-server.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.routers.mcp-server.tls=true"
      - "traefik.http.routers.mcp-server.tls.certresolver=letsencrypt"

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: mcp-postgres-prod
    environment:
      POSTGRES_DB: mcp_production
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_production"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network
    ports:
      - "5432:5432"  # Remove in production if not needed externally

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mcp-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network
    ports:
      - "6379:6379"  # Remove in production if not needed externally

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - mcp-server
    restart: unless-stopped
    networks:
      - mcp-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mcp-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - mcp-network

  # Log Aggregation (Optional)
  loki:
    image: grafana/loki:latest
    container_name: mcp-loki-prod
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - mcp-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  mcp_database:
    driver: local

networks:
  mcp-network:
    driver: bridge