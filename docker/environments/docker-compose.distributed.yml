version: '3.8'

services:
  # Redis for job queue and worker coordination
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - distributed_network

  # Master coordinator node
  coordinator:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - BATCH_SIZE=100
      - MAX_WORKERS=10
      - HEALTH_CHECK_INTERVAL=10
    volumes:
      - ./mcp_server:/app/mcp_server
      - ./repos:/app/repos  # Mount directory for repositories to index
    command: python -m mcp_server.distributed.launcher coordinator
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - distributed_network
    ports:
      - "8080:8080"  # Optional monitoring port
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; redis.Redis(host='redis').ping()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker nodes (scale as needed)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - WORKER_ID=${WORKER_ID:-worker}
    volumes:
      - ./mcp_server:/app/mcp_server
      - ./repos:/app/repos  # Mount directory for repositories to index
    command: python -m mcp_server.distributed.launcher worker --worker-id ${WORKER_ID:-worker-$$}
    depends_on:
      redis:
        condition: service_healthy
      coordinator:
        condition: service_healthy
    networks:
      - distributed_network
    deploy:
      replicas: 4  # Default number of workers
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; redis.Redis(host='redis').ping()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis monitoring
  redis_exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - distributed_network
    profiles:
      - monitoring

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - distributed_network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - distributed_network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  distributed_network:
    driver: bridge