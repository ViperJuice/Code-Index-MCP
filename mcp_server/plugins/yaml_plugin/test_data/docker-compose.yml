version: '3.8'

# Common environment variables
x-common-env: &common-env
  NODE_ENV: production
  LOG_LEVEL: info
  DATABASE_URL: postgres://user:password@db:5432/appdb

# Common restart policy
x-restart-policy: &restart-policy
  restart: unless-stopped

services:
  # Web application service
  web:
    <<: *restart-policy
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=18
    environment:
      <<: *common-env
      PORT: 3000
      REDIS_URL: redis://redis:6379
    ports:
      - "3000:3000"
    depends_on:
      - db
      - redis
    volumes:
      - ./src:/app/src:ro
      - node_modules:/app/node_modules
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database service
  db:
    <<: *restart-policy
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network

  # Redis cache service
  redis:
    <<: *restart-policy
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Nginx reverse proxy
  nginx:
    <<: *restart-policy
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  node_modules:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16